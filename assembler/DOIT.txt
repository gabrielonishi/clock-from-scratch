# Setup
SETUP:
# Zerando os displays de sete segmentos
LDI R0, $0      #Carrega o acumulador com o valor 0
STA R0, @288    #Armazena o valor do acumulador em HEX0
STA R0, @289    #Armazena o valor do acumulador em HEX1
STA R0, @290    #Armazena o valor do acumulador em HEX2
STA R0, @291    #Armazena o valor do acumulador em HEX3
STA R0, @292    #Armazena o valor do acumulador em HEX4
STA R0, @293    #Armazena o valor do acumulador em HEX5

#Limpar os botoes (rst do FF)
STA R0, @511   #Limpando FF do KEY0
STA R0, @510   #Limpando FF do KEY1
STA R0, @509   #Limpando FF do KEY2
STA R0, @508   #Limpando FF do KEY3

#Inicializando as variaveis do display
STA R0, @0     #Armazena o valor do acumulador em MEM[0] (unidades)
STA R0, @1     #Armazena o valor do acumulador em MEM[1] (dezenas)
STA R0, @2     #Armazena o valor do acumulador em MEM[2] (centenas)
STA R0, @3     #Armazena o valor do acumulador em MEM[3] (milhares)
STA R0, @4     #Armazena o valor do acumulador em MEM[4] (dezenas de milhares)
STA R0, @5     #Armazena o valor do acumulador em MEM[5] (centenas de milhares)

#Setando a flag de contagem
STA R0, @15   #Armazena o valor do acumulador em MEM[15] (flag)

#Apagando os LEDs
STA R0, @257    #Armazena o valor do bit0 do acumulador no LDR8 (indica Overflow)
STA R0, @258    #Armazena o valor do bit0 do acumulador no LDR9 (indica Limite Atingido)
LDI R0, $1     
STA R0, @256    #Armazena o valor do acumulador no LDR0 ~ LDR7

#Inicializando as variaveis do limite
LDI R0, $9     #Carrega o acumulador com o valor 9
STA R0, @6     #Armazena o valor do acumulador em MEM[6] (unidades)
STA R0, @7     #Armazena o valor do acumulador em MEM[7] (dezenas)
STA R0, @8     #Armazena o valor do acumulador em MEM[8] (centenas)
STA R0, @9     #Armazena o valor do acumulador em MEM[9] (milhares)
STA R0, @10    #Armazena o valor do acumulador em MEM[10] (dezenas de milhares)
STA R0, @11    #Armazena o valor do acumulador em MEM[11] (centenas de milhares)

#Salvando variaveis utilizadas em comparacoes
LDI R0, $10    #Carrega o acumulador com o valor 10 para fzer incrementos
STA R0, @12    #Armazena o valor do acumulador em MEM[12] (valor para comparacao limite da faixa a ser exibida)
LDI R0, $0     #Carrega o acumulador com o valor 0 para fazer comparacao com o botao
STA R0, @13    #Armazena o valor do acumulador em MEM[13] (valor para comparacao do aperto do botao)
LDI R0, $1     #Carrega o acumulador com o valor 1 para fazer comparacao com o botao
STA R0, @14    #Armazena o valor do acumulador em MEM[14] (valor para comparacao do aperto do botao)
# Armazena 10 em MEM[16]
LDI R0, $10
STA R0, @16
# Armazena 11 em MEM[17]
LDI R0, $11
STA R0, @17
# Armazena 12 em MEM[18]
LDI R0, $12
STA R0, @18
# Armazena 13 em MEM[19]
LDI R0, $13
STA R0, @19
# Armazena 14 em MEM[20]
LDI R0, $14
STA R0, @20
# Armazena 15 em MEM[21]
LDI R0, $15
STA R0, @21

INICIO:
# Ler o botão de incremento de contagem (KEY0):
LDA R0, @352                # Lê KEY0
ANDI R0, $1                 # Limpa KEY0
# Caso tenha sido pressionado, desviar para a sub-rotina de incremento de valor.
CEQ R0, @13                 # Compara valor com 0 (MEM[13])
JEQ @CHECK_KEY1             # Caso não tenha sido apertado, checa KEY1
JSR @INCREMENTA             # Se for apertado (KEY0=1), pula pra INCREMENTA

CHECK_KEY1:
# Ler o botão de configuração do limite de incremento (KEY1):
LDA R0, @353                # Lê KEY1
ANDI R0, $1                 # Limpa KEY1
# Caso não esteja pressionado, verifica FPGA_RESET
CEQ R0, @13                 # Compara valor com 0 (MEM[13])
JEQ @CHECK_RESET            # Caso não tenha sido apertado, checa FPGA_RESET
# Caso esteja pressionado, vai para sub-rotina de checar limite
JMP @SET_LIMIT              # Se for apertado (KEY1=1), pula pra SET_LIMIT

CHECK_RESET:
# Ler o botão de reiniciar contagem (FPGA_RESET):
LDA R0, @356                # Lê FPG_RESET
ANDI R0, $1                 # Limpa FPG_RESET
# Caso esteja pressionado, desviar para a sub-rotina de reiniciar contagem.
CEQ R0, @13                 # Compara valor com 0 (MEM[13])
JEQ @SETUP                  # Pula para fazer o setup novamente

# Escrever os valores das variáveis nos respectivos displays (pode ser uma sub-rotina).
JSR @DISPLAY

JSR @VERIFICA_LIMITE

# Desviar para o **INÍCIO**.
JMP @INICIO

# -----------------------------------------------------
# SUBROTINAS

DISPLAY:
# Carrega valor de memória de cada unidade
# e os mostra no display
LDA R0, @0                  
STA R0, @288
LDA R0, @1
STA R0, @289
LDA R0, @2                  
STA R0, @290
LDA R0, @3                  
STA R0, @291
LDA R0, @4                 
STA R0, @292
LDA R0, @5 
STA R0, @293
RET

INCREMENTA:

STA R0, @511                # Limpa FF de KEY0

# Verificando flag inibição de contagem
LDA R0, @15                 #Carrega valor flag
CEQ R0, @14                 #Compara com 1  (FALSE)
JEQ @INICIO

#INC_UNIDADE:
LDA R0, @0                  # Carrega valor das unidades
INC R0                      # Incrementa valor
# Checa se ultrapassou 10
CEQ R0, @12
JEQ @INC_DEZENA
# Caso contrário, carrega novo valor
STA R0, @0                  # Carrega novo valor da unidade (MEM[0])
RET

INC_DEZENA:
# Reseta valor da unidade
LDI R0, $0
STA R0, @0
LDA R0, @1
INC R0
CEQ R0, @12
JEQ @INC_CENTENA
STA R0, @1
RET

INC_CENTENA:
# Reseta valor da unidade
LDI R0, $0
STA R0, @1
LDA R0, @2
INC R0
CEQ R0, @12
JEQ @INC_MILHAR
STA R0, @2
RET

INC_MILHAR:
# Reseta valor da unidade
LDI R0, $0
STA R0, @2
LDA R0, @3
INC R0
CEQ R0, @12
JEQ @INC_DEZ_MILHAR
STA R0, @3
RET

INC_DEZ_MILHAR:
# Reseta valor da unidade
LDI R0, $0
STA R0, @3
LDA R0, @4
INC R0
CEQ R0, @12
JEQ @INC_CEN_MILHAR
STA R0, @4
RET

INC_CEN_MILHAR:
# Reseta valor da unidade
LDI R0, $0
STA R0, @4
LDA R0, @5
INC R0
CEQ R0, @12
JEQ @OVERFLOW
STA R0, @5
RET

OVERFLOW:
LDI R0, $1
STA R0, @15
LDA R0, @257
RET

SET_LIMIT:
#Setando limite (unidade):
STA R0, @510            #Limpa FF da KEY1
LDA R0, @320            #Armazena o valor lido nas chaves (ler SW0~SW7)
ANDI R0, $15            #Mascara para limpar valor

JSR @CHECK_LIMIT        #Vê se valor da chave é maior que 10
STA R0, @6              #Armazena o valor do acumulador nas unidades do limite

#Carrega valor no display
STA R0, @288

#Setando limite (dezenas):
LDI R0, $2              #Carrega o acumulador com o valor 2
STA R0, @256            #Armazena 2 no LDR0 até LDR7 (mostrando dezenas)
SET_DEZENA:
LDA R0, @353            #Armazena o valor lido no KEY1 (ler KEY1)
ANDI R0, @1             #Utiliza mascara para limpar o valor lido do botao
CEQ R0, @13             #Compara o valor lido de KEY1 com 0 (zero esta salvo na posicao 13)
JEQ @SET_DEZENA         #KEY1 nao foi apertado então faz o desvio (fica esperando)

STA R0, @510            #Limpando FF do KEY1
LDA R0, @320            #Armazena o valor lido nas chaves (ler SW0~SW7)
ANDI R0, $15            #Mascara para limpar valor

JSR @CHECK_LIMIT        #Vê se valor da chave é maior que 10
STA R0, @7              #Armazena o valor do acumulador no espaco das dezenas do limite

#Carrega valor no display
STA R0, @289

#Setando limite (centenas):
LDI R0, $4              #Carrega o acumulador com o valor 4
STA R0, @256            #Armazena 1 no LDR0 até LDR7 (mostrando centenas)
SET_CENTENA:
LDA R0, @353            #Armazena o valor lido no KEY1 (ler KEY1)
ANDI R0, @1             #Utiliza mascara para limpar o valor lido do botao
CEQ R0, @13             #Compara o valor lido de KEY1 com 0 (zero esta salvo na posicao 13)
JEQ @SET_CENTENA        #KEY1 nao foi apertado então faz o desvio (fica esperando)

STA R0, @510            #Limpando FF do KEY1
LDA R0, @320            #Armazena o valor lido nas chaves (ler SW0~SW7)
ANDI R0, $15            #Mascara para limpar valor

JSR @CHECK_LIMIT    #Vê se valor da chave é maior que 10
STA R0, @8              #Armazena o valor do acumulador no espaco das centenas do limite

#Carrega valor no display
STA R0, @290

#Setando limite (milhares):
LDI R0, $8              #Carrega o acumulador com o valor 8
STA R0, @256            #Armazena 1 no LDR0 até LDR7 (mostrando milhares)
SET_MILHAR:
LDA R0, @353            #Armazena o valor lido no KEY1 (ler KEY1)
ANDI R0, @1             #Utiliza mascara para limpar o valor lido do botao
CEQ R0, @13             #Compara o valor lido de KEY1 com 0 (zero esta salvo na posicao 13)
JEQ @SET_MILHAR         #KEY1 nao foi apertado então faz o desvio (fica esperando)

STA R0, @510            #Limpando FF do KEY11
LDA R0, @320            #Armazena o valor lido nas chaves (ler SW0~SW7)
ANDI R0, $15            #Mascara para limpar valor

JSR @CHECK_LIMIT        #Vê se valor da chave é maior que 10
STA R0, @9              #Armazena o valor do acumulador no espaco das milhares do limite

#Carrega valor no display
STA R0, @291

#Setando limite (dezenas de milhares):
LDI R0, $16             #Carrega o acumulador com o valor 16
STA R0, @256            #Armazena 1 no LDR0 até LDR7 (mostrando dezenas de milhares)
SET_DEZMILHAR:
LDA R0, @353            #Armazena o valor lido no KEY1 (ler KEY1)
ANDI R0, @1             #Utiliza mascara para limpar o valor lido do botao
CEQ R0, @13             #Compara o valor lido de KEY1 com 0 (zero esta salvo na posicao 13)
JEQ @SET_DEZMILHAR      #KEY1 nao foi apertado então faz o desvio (fica esperando)

STA R0, @510            #Limpando FF do KEY1
LDA R0, @320            #Armazena o valor lido nas chaves (ler SW0~SW7)
ANDI R0, $15            #Mascara para limpar valor

JSR @CHECK_LIMIT        #Vê se valor da chave é maior que 10
STA R0, @10             #Armazena o valor do acumulador no espaco das dezenas de milhares do limite

#Carrega valor no display
STA R0, @292

#Setando limite (centenas de milhares):
LDI R0, $32             #Carrega o acumulador com o valor 16
STA R0, @256            #Armazena 1 no LDR0 até LDR7 (mostrando centenas de milhares)
SET_CENMILHAR:
LDA R0, @353            #Armazena o valor lido no KEY1 (ler KEY1)
ANDI R0, @1             #Utiliza mascara para limpar o valor lido do botao
CEQ R0, @13             #Compara o valor lido de KEY1 com 0 (zero esta salvo na posicao 13)
JEQ @SET_CENMILHAR      #KEY1 nao foi apertado então faz o desvio (fica esperando)

STA R0, @510            #Limpando FF do KEY1
LDA R0, @320            #Armazena o valor lido nas chaves (ler SW0~SW7)
ANDI R0, $15            #Mascara para limpar valor

JSR @CHECK_LIMIT        #Vê se valor da chave é maior que 10
STA R0, @11             #Armazena o valor do acumulador no espaco das centenas de milhares do limite

#Carrega valor no display
STA R0, @293

LDI R0, $1              #Carrega o acumulador com o valor 2
STA R0, @256            #Armazena 2 no LDR0 até LDR7 (mostrando dezenas)

JMP @CHECK_RESET

# Subrotina para verificar se limite de uma casa
CHECK_LIMIT:
CEQ R0, @16
JEQ @SET_9
CEQ R0, @17
JEQ @SET_9
CEQ R0, @18
JEQ @SET_9
CEQ R0, @19
JEQ @SET_9
CEQ R0, @20
JEQ @SET_9
CEQ R0, @21
JEQ @SET_9
VOLTA:
RET

SET_9:
LDI R0, @9
JMP @VOLTA

VERIFICA_LIMITE:
# Comparação das unidades
LDA R0, @0
CEQ R0, @6
JEQ @VERIFICA_DEZ
RET

VERIFICA_DEZ:
LDA R0, @1
CEQ R0, @7
JEQ @VERIFICA_CEN
RET

VERIFICA_CEN:
LDA R0, @2
CEQ R0, @8
JEQ @VERIFICA_MIL
RET

VERIFICA_MIL:
LDA R0, @3
CEQ R0, @9
JEQ @VERIFICA_DEZ_MIL
RET

VERIFICA_DEZ_MIL:
LDA R0, @4
CEQ R0, @10
JEQ @VERIFICA_CEN_MIL
RET

VERIFICA_CEN_MIL:
LDA R0, @5
CEQ R0, @11
JEQ @LIMITE_ATINGIDO
RET

LIMITE_ATINGIDO:
# Liga LED9 (de limite atingido)
LDI R0, $1
STA R0, @258
# Ativa flag de inibição de contagem
STA R0, @15
JMP @INICIO