# Setup
SETUP:
# Zerando os displays de sete segmentos
LDI R0, $0      #Carrega o acumulador com o valor 0
STA R0, @288    #Armazena o valor do acumulador em HEX0
STA R0, @289    #Armazena o valor do acumulador em HEX1
STA R0, @290    #Armazena o valor do acumulador em HEX2
STA R0, @291    #Armazena o valor do acumulador em HEX3
STA R0, @292    #Armazena o valor do acumulador em HEX4
STA R0, @293    #Armazena o valor do acumulador em HEX5

#Limpar os botoes (rst do FF)
STA R0, @511   #Limpando FF do KEY0
STA R0, @510   #Limpando FF do KEY1
STA R0, @509   #Limpando FF do KEY2
STA R0, @508   #Limpando FF do KEY3

#Inicializando as variaveis do tempo
STA R0, @0     #Armazena o valor do acumulador em MEM[0] (segundos unidade)
STA R0, @1     #Armazena o valor do acumulador em MEM[1] (segundos dezenas)
STA R0, @2     #Armazena o valor do acumulador em MEM[2] (minutos unidade)
STA R0, @3     #Armazena o valor do acumulador em MEM[3] (minutos dezenas)
STA R0, @4     #Armazena o valor do acumulador em MEM[4] (hora unidade)
STA R0, @5     #Armazena o valor do acumulador em MEM[5] (hora dezenas)

#Apagando os LEDs
STA R0, @257    #Armazena o valor do bit0 do acumulador no LDR8 (indica Overflow)
STA R0, @258    #Armazena o valor do bit0 do acumulador no LDR9 (indica Limite Atingido)    
STA R0, @256    #Armazena o valor do acumulador no LDR0 ~ LDR7

#Inicializando as variaveis de comparação
LDI R0, $10    #Carrega o acumulador com o valor 10
STA R0, @6     #Armazena o valor do acumulador em MEM[6] (segundos unidade)
STA R0, @8     #Armazena o valor do acumulador em MEM[8] (minutos unidade)
LDI R0, $6     #Carrega o acumulador com o valor 6
STA R0, @7     #Armazena o valor do acumulador em MEM[7] (segundos dezenas)
STA R0, @9     #Armazena o valor do acumulador em MEM[9] (minutos dezenas)
LDI R0, $4     #Carrega o acumulador com o valor 6
STA R0, @10    #Armazena o valor do acumulador em MEM[10] (hora unidade)
LDI R0, $3     #Carrega o acumulador com o valor 3
STA R0, @11    #Armazena o valor do acumulador em MEM[11] (hora dezenas)

# Variáveis para comparação de setar hora
LDI R0, $9      
STA R0, @15    #Valor para comparação setar segundo, minuto
LDI R0, $5
STA R0, @16    #Valor para comparação setar dez segundo, minuto
LDI R0, $3
STA R0, @17    #valor para comparação setar hora
LDI R0, $2    
STA R0, @18    #Valor para comparação setar dez hora

#Salvando variaveis utilizadas em comparacoes
LDI R0, $0     #Carrega o acumulador com o valor 0 para fazer comparacao com o botao
STA R0, @13    #Armazena o valor do acumulador em MEM[13] (valor para comparacao do aperto do botao)
LDI R0, $1     #Carrega o acumulador com o valor 1 para fazer comparacao com o botao
STA R0, @14    #Armazena o valor do acumulador em MEM[14] (valor para comparacao do aperto do botao)

#flag alarme
LDI R0, $0    #Carrega acumulador com o valor 0 para flag
STA R0, @19   #Armazena na posicao 19 a flag do alarme  

#Inicializando as variaveis do tempo
LDI R0, $9
STA R0, @20     #Armazena o valor do acumulador em MEM[20] (segundos unidade)
STA R0, @21     #Armazena o valor do acumulador em MEM[21] (segundos dezenas)
STA R0, @22     #Armazena o valor do acumulador em MEM[22] (minutos unidade)
STA R0, @23     #Armazena o valor do acumulador em MEM[23] (minutos dezenas)
STA R0, @24     #Armazena o valor do acumulador em MEM[24] (hora unidade)
STA R0, @25     #Armazena o valor do acumulador em MEM[25] (hora dezenas)


# -----------------------------------------------------

INICIO:
# Ler o botão de incremento de contagem (KEY0):
LDA R0, @352                # Lê KEY0
ANDI R0, $1                 # Limpa KEY0
# Caso tenha sido pressionado, desviar para a sub-rotina de incremento de valor.
CEQ R0, @13                 # Compara valor com 0 (MEM[13])
JEQ @CHECK_KEY1             # Caso não tenha sido apertado, checa KEY1
JSR @INCREMENTA             # Se for apertado (KEY0=1), pula pra INCREMENTA

CHECK_KEY1:
# Ler o botão de configuração do limite de incremento (KEY1):
LDA R0, @353                # Lê KEY1
ANDI R0, $1                 # Limpa KEY1
# Caso não esteja pressionado, verifica FPGA_RESET
CEQ R0, @13                 # Compara valor com 0 (MEM[13])
JEQ @CHECK_KEY2            # Caso não tenha sido apertado, checa KEY2
# Caso esteja pressionado, vai para sub-rotina de checar limite
JMP @SET_HORARIO              # Se for apertado (KEY1=1), pula pra SET_HORARIO

CHECK_KEY2:
# Ler o botão de configuração do limite de incremento (KEY2):
LDA R0, @354                # Lê KEY2
ANDI R0, $1                 # Limpa KEY2
# Caso não esteja pressionado, verifica FPGA_RESET
CEQ R0, @13                 # Compara valor com 0 (MEM[13])
JEQ @CHECK_RESET            # Caso não tenha sido apertado, checa FPGA_RESET
# Caso esteja pressionado, vai para sub-rotina de setar alarme
JMP @ALAR_ALARME              # Se for apertado (KEY2=1), pula pra ALAR_ALARME

CHECK_RESET:
# Ler o botão de reiniciar contagem (FPGA_RESET):
LDA R0, @356                # Lê FPG_RESET
ANDI R0, $1                 # Limpa FPG_RESET
# Caso esteja pressionado, desviar para a sub-rotina de reiniciar contagem.
CEQ R0, @13                 # Compara valor com 0 (MEM[13])
JEQ @SETUP                  # Pula para fazer o setup novamente

# Escrever os valores das variáveis nos respectivos displays (pode ser uma sub-rotina).
JSR @DISPLAY

#Verifica se chegou no alarme
JSR @VERIFICA_ALARME

# Desviar para o **INÍCIO**.
JMP @INICIO

# -----------------------------------------------------
# SUBROTINAS

DISPLAY:
# Carrega valor de memória de cada unidade
# e os mostra no display
LDA R0, @0                  
STA R0, @288
LDA R0, @1
STA R0, @289
LDA R0, @2                  
STA R0, @290
LDA R0, @3                  
STA R0, @291
LDA R0, @4                 
STA R0, @292
LDA R0, @5 
STA R0, @293
RET

INCREMENTA:

STA R0, @511                # Limpa FF de KEY0

# Verificando flag inibição de contagem
LDA R0, @19                 #Carrega valor flag
CEQ R0, @14                 #Compara com 1  (FALSE)
JEQ @INICIO

#INC_SEG_UNI:
LDA R0, @0                  # Carrega valor das unidades
INC R0                      # Incrementa valor
# Checa se ultrapassou 10
CEQ R0, @6
JEQ @INC_SEG_DEZ
# Caso contrário, carrega novo valor
STA R0, @0                  # Carrega novo valor da unidade (MEM[0])
RET

INC_SEG_DEZ:
# Reseta valor da unidade
LDI R0, $0          
STA R0, @0                  #Carrega valor segundo unidade
LDA R0, @1                  #Carrega valor segundo dezena
INC R0
CEQ R0, @7
JEQ @INC_MIN_UNI
STA R0, @1
RET

INC_MIN_UNI:
# Reseta valor da unidade
LDI R0, $0
STA R0, @1
LDA R0, @2
INC R0
CEQ R0, @8
JEQ @INC_MIN_DEZ
STA R0, @2
RET

INC_MIN_DEZ:
# Reseta valor da unidade
LDI R0, $0
STA R0, @2
LDA R0, @3
INC R0
CEQ R0, @9
JEQ @INC_HORA_UNI
STA R0, @3
RET

INC_HORA_UNI:
# Reseta valor da unidade
LDI R0, $0
STA R0, @3
LDA R0, @4
INC R0
CEQ R0, @10
JEQ @INC_HORA_DEZ
STA R0, @4
RET

INC_HORA_DEZ:
# Reseta valor da unidade
LDI R0, $0
STA R0, @4
LDA R0, @5
INC R0
CEQ R0, @11
JEQ @OVERFLOW
STA R0, @5
RET

OVERFLOW:
LDI R0, $0
STA R0, @0     #Armazena o valor do acumulador em MEM[0] (segundos unidade)
STA R0, @1     #Armazena o valor do acumulador em MEM[1] (segundos dezenas)
STA R0, @2     #Armazena o valor do acumulador em MEM[2] (minutos unidade)
STA R0, @3     #Armazena o valor do acumulador em MEM[3] (minutos dezenas)
STA R0, @4     #Armazena o valor do acumulador em MEM[4] (hora unidade)
STA R0, @5     #Armazena o valor do acumulador em MEM[5] (hora dezenas)
RET

SET_HORARIO:
#Setando limite (segundos unidade):
STA R0, @510            #Limpa FF da KEY1
LDA R0, @320            #Armazena o valor lido nas chaves (ler SW0~SW7)
ANDI R0, $15            #Mascara para limpar valor

CLT R0, @15               #Faz R0- 9
JLT @PULA_1     #Se o que usuário colocar for > 9, vira 9
LDI R0, $9
PULA_1:
STA R0, @0              #Armazena o valor do acumulador no segundo unidadeE
STA R0, @288            #Carrega valor no display

# Setando limite (dezenas):
LDI R0, $2              #Carrega o acumulador com o valor 2
STA R0, @256            #Armazena 2 no LDR0 até LDR7 (segundos dezenas)

SET_SEG_DEZ:
LDA R0, @353            #Armazena o valor lido no KEY1 (ler KEY1)
ANDI R0, @1             #Utiliza mascara para limpar o valor lido do botao
CEQ R0, @13             #Compara o valor lido de KEY1 com 0 (zero esta salvo na posicao 13)
JEQ @SET_SEG_DEZ        #KEY1 nao foi apertado então faz o desvio (fica esperando)

STA R0, @510            #Limpando FF do KEY1
LDA R0, @320            #Armazena o valor lido nas chaves (ler SW0~SW7)
ANDI R0, $15            #Mascara para limpar valor

CLT R0, @16             #Faz 5 - R0
JLT @PULA_2            #Se o que usuário colocar for > 5, vira 5
LDI R0, $5
PULA_2:
STA R0, @1              #Armazena o valor do acumulador no espaco das dezenas do limite

#Carrega valor no display
STA R0, @289

#Setando horário dos minutos:
LDI R0, $4              #Carrega o acumulador com o valor 4
STA R0, @256            #Armazena 1 no LDR0 até LDR7 (mostrando centenas)
SET_MIN_UNI:
LDA R0, @353            #Armazena o valor lido no KEY1 (ler KEY1)
ANDI R0, @1             #Utiliza mascara para limpar o valor lido do botao
CEQ R0, @13             #Compara o valor lido de KEY1 com 0 (zero esta salvo na posicao 13)
JEQ @SET_MIN_UNI        #KEY1 nao foi apertado então faz o desvio (fica esperando)

STA R0, @510            #Limpando FF do KEY1
LDA R0, @320            #Armazena o valor lido nas chaves (ler SW0~SW7)
ANDI R0, $15            #Mascara para limpar valor


CLT R0, @15             #Faz 9 - R0
JLT @PULA_3     #Se o que usuário colocar for > 9, vira 9
LDI R0, $9
PULA_3:
STA R0, @2              #Armazena o valor do acumulador no espaco das centenas do limite

#Carrega valor no display
STA R0, @290

#Setando limite (dezenas de minuto):
LDI R0, $8              #Carrega o acumulador com o valor 8
STA R0, @256            #Armazena 1 no LDR0 até LDR7 (mostrando milhares)
SET_MIN_DEZ:
LDA R0, @353            #Armazena o valor lido no KEY1 (ler KEY1)
ANDI R0, @1             #Utiliza mascara para limpar o valor lido do botao
CEQ R0, @13             #Compara o valor lido de KEY1 com 0 (zero esta salvo na posicao 13)
JEQ @SET_MIN_DEZ         #KEY1 nao foi apertado então faz o desvio (fica esperando)

STA R0, @510            #Limpando FF do KEY11
LDA R0, @320            #Armazena o valor lido nas chaves (ler SW0~SW7)
ANDI R0, $15            #Mascara para limpar valor


CLT R0, @16             #Faz 5 - R0
JLT @PULA_4            #Se o que usuário colocar for > 5, vira 5
LDI R0, $5
PULA_4:
STA R0, @3              #Armazena o valor do acumulador no espaco das milhares do limite

#Carrega valor no display
STA R0, @291

#Setando limite unidade de hora:
LDI R0, $16             #Carrega o acumulador com o valor 16
STA R0, @256            #Armazena 1 no LDR0 até LDR7 (mostrando dezenas de milhares)
SET_HORA_UNI:
LDA R0, @353            #Armazena o valor lido no KEY1 (ler KEY1)
ANDI R0, @1             #Utiliza mascara para limpar o valor lido do botao
CEQ R0, @13             #Compara o valor lido de KEY1 com 0 (zero esta salvo na posicao 13)
JEQ @SET_HORA_UNI      #KEY1 nao foi apertado então faz o desvio (fica esperando)

STA R0, @510            #Limpando FF do KEY1
LDA R0, @320            #Armazena o valor lido nas chaves (ler SW0~SW7)
ANDI R0, $15            #Mascara para limpar valor


CLT R0, @17             #Faz 3 - R0
JLT @PULA_5            #Se o que usuário colocar for > 3, vira 3
LDI R0, $3
PULA_5:
STA R0, @4              #Armazena o valor do acumulador no espaco das dezenas de milhares do limite

#Carrega valor no display
STA R0, @292

#Setando limite (centenas de milhares):
LDI R0, $32             #Carrega o acumulador com o valor 16
STA R0, @256            #Armazena 1 no LDR0 até LDR7 (mostrando centenas de milhares)
SET_HORA_DEZ:
LDA R0, @353            #Armazena o valor lido no KEY1 (ler KEY1)
ANDI R0, @1             #Utiliza mascara para limpar o valor lido do botao
CEQ R0, @13             #Compara o valor lido de KEY1 com 0 (zero esta salvo na posicao 13)
JEQ @SET_HORA_DEZ      #KEY1 nao foi apertado então faz o desvio (fica esperando)

STA R0, @510            #Limpando FF do KEY1
LDA R0, @320            #Armazena o valor lido nas chaves (ler SW0~SW7)
ANDI R0, $15            #Mascara para limpar valor


CLT R0, @18             #Faz 2 - R0
JLT @PULA_6            #Se o que usuário colocar for > 2, vira 2
LDI R0, $2
PULA_6:
STA R0, @5              #Armazena o valor do acumulador no espaco das centenas de milhares do limite

#Carrega valor no display
STA R0, @293

LDI R0, $1              #Carrega o acumulador com o valor 2
STA R0, @256            #Armazena 2 no LDR0 até LDR7 (mostrando dezenas)

JMP @CHECK_KEY2

#Subrotia que ajusta alarme
ALAR_ALARME:
#Setando limite (segundos unidade):
STA R0, @509            #Limpa FF da KEY2
LDA R0, @320            #Armazena o valor lido nas chaves (ler SW0~SW7)
ANDI R0, $15            #Mascara para limpar valor

CLT R0, @15               #Faz R0- 9
JLT @PULA_10     #Se o que usuário colocar for > 9, vira 9
LDI R0, $9
PULA_10:
STA R0, @20             #Armazena o valor do acumulador no segundo unidadeE
STA R0, @288            #Carrega valor no display

# Setando limite (segundos dezenas):
LDI R0, $2              #Carrega o acumulador com o valor 2
STA R0, @256            #Armazena 2 no LDR0 até LDR7 (segundos dezenas)

ALAR_SEG_DEZ:
LDA R0, @354            #Armazena o valor lido no KEY2 (ler KEY2)
ANDI R0, $1             #Utiliza mascara para limpar o valor lido do botao
CEQ R0, @13             #Compara o valor lido de KEY1 com 0 (zero esta salvo na posicao 13)
JEQ @ALAR_SEG_DEZ        #KEY1 nao foi apertado então faz o desvio (fica esperando)

STA R0, @509            #Limpando FF do KEY1
LDA R0, @320            #Armazena o valor lido nas chaves (ler SW0~SW7)
ANDI R0, $15            #Mascara para limpar valor

CLT R0, @16             #Faz 5 - R0
JLT @PULA_20            #Se o que usuário colocar for > 5, vira 5
LDI R0, $5
PULA_20:
STA R0, @21              #Armazena o valor do acumulador no espaco das dezenas do limite

#Carrega valor no display
STA R0, @289

#Setando horário dos minutos:
LDI R0, $4              #Carrega o acumulador com o valor 4
STA R0, @256            #Armazena 1 no LDR0 até LDR7 (mostrando centenas)
ALAR_MIN_UNI:
LDA R0, @354            #Armazena o valor lido no KEY2 (ler KEY2)
ANDI R0, @1             #Utiliza mascara para limpar o valor lido do botao
CEQ R0, @13             #Compara o valor lido de KEY1 com 0 (zero esta salvo na posicao 13)
JEQ @ALAR_MIN_UNI        #KEY1 nao foi apertado então faz o desvio (fica esperando)

STA R0, @509            #Limpando FF do KEY1
LDA R0, @320            #Armazena o valor lido nas chaves (ler SW0~SW7)
ANDI R0, $15            #Mascara para limpar valor


CLT R0, @15             #Faz 9 - R0
JLT @PULA_30            #Se o que usuário colocar for > 9, vira 9
LDI R0, $9
PULA_30:
STA R0, @22             #Armazena o valor do acumulador no espaco das centenas do limite

#Carrega valor no display
STA R0, @290

#Setando limite (dezenas de minuto):
LDI R0, $8              #Carrega o acumulador com o valor 8
STA R0, @256            #Armazena 1 no LDR0 até LDR7 (mostrando milhares)
ALAR_MIN_DEZ:
LDA R0, @354            #Armazena o valor lido no KEY2 (ler KEY2)
ANDI R0, @1             #Utiliza mascara para limpar o valor lido do botao
CEQ R0, @13             #Compara o valor lido de KEY1 com 0 (zero esta salvo na posicao 13)
JEQ @ALAR_MIN_DEZ         #KEY1 nao foi apertado então faz o desvio (fica esperando)

STA R0, @509            #Limpando FF do KEY2
LDA R0, @320            #Armazena o valor lido nas chaves (ler SW0~SW7)
ANDI R0, $15            #Mascara para limpar valor


CLT R0, @16             #Faz 5 - R0
JLT @PULA_40             #Se o que usuário colocar for > 5, vira 5
LDI R0, $5
PULA_40:
STA R0, @23              #Armazena o valor do acumulador no espaco das milhares do limite

#Carrega valor no display
STA R0, @291

#Setando limite unidade de hora:
LDI R0, $16             #Carrega o acumulador com o valor 16
STA R0, @256            #Armazena 1 no LDR0 até LDR7 (mostrando dezenas de milhares)
ALAR_HORA_UNI:
LDA R0, @354            #Armazena o valor lido no KEY2 (ler KEY2)
ANDI R0, @1             #Utiliza mascara para limpar o valor lido do botao
CEQ R0, @13             #Compara o valor lido de KEY1 com 0 (zero esta salvo na posicao 13)
JEQ @ALAR_HORA_UNI      #KEY1 nao foi apertado então faz o desvio (fica esperando)

STA R0, @509            #Limpando FF do KEY2
LDA R0, @320            #Armazena o valor lido nas chaves (ler SW0~SW7)
ANDI R0, $15            #Mascara para limpar valor


CLT R0, @17             #Faz 3 - R0
JLT @PULA_50            #Se o que usuário colocar for > 3, vira 3
LDI R0, $3
PULA_50:
STA R0, @24              #Armazena o valor do acumulador no espaco das dezenas de milhares do limite

#Carrega valor no display
STA R0, @292

#Setando limite (centenas de milhares):
LDI R0, $32             #Carrega o acumulador com o valor 16
STA R0, @256            #Armazena 1 no LDR0 até LDR7 (mostrando centenas de milhares)
ALAR_HORA_DEZ:
LDA R0, @354            #Armazena o valor lido no KEY2 (ler KEY2)
ANDI R0, @1             #Utiliza mascara para limpar o valor lido do botao
CEQ R0, @13             #Compara o valor lido de KEY1 com 0 (zero esta salvo na posicao 13)
JEQ @ALAR_HORA_DEZ      #KEY1 nao foi apertado então faz o desvio (fica esperando)

STA R0, @509            #Limpando FF do KEY2
LDA R0, @320            #Armazena o valor lido nas chaves (ler SW0~SW7)
ANDI R0, $15            #Mascara para limpar valor


CLT R0, @18             #Faz 2 - R0
JLT @PULA_60            #Se o que usuário colocar for > 2, vira 2
LDI R0, $2
PULA_60:
STA R0, @25              #Armazena o valor do acumulador no espaco das centenas de milhares do limite

#Carrega valor no display
STA R0, @293

LDI R0, $1              #Carrega o acumulador com o valor 2
STA R0, @256            #Armazena 2 no LDR0 até LDR7 (mostrando dezenas)

JMP @CHECK_RESET

VERIFICA_ALARME:
# Comparação do segundo unidade
LDA R0, @0
CEQ R0, @20
JEQ @VERIFICA_SEG_DEZ
RET

VERIFICA_SEG_DEZ:
LDA R0, @1
CEQ R0, @21
JEQ @VERIFICA_MIN
RET

VERIFICA_MIN:
LDA R0, @2
CEQ R0, @22
JEQ @VERIFICA_MIN_DEZ
RET

VERIFICA_MIN_DEZ:
LDA R0, @3
CEQ R0, @23
JEQ @VERIFICA_HORA
RET

VERIFICA_HORA:
LDA R0, @4
CEQ R0, @24
JEQ @VERIFICA_HORA_DEZ
RET

VERIFICA_HORA_DEZ:
LDA R0, @5
CEQ R0, @25
JEQ @ALARME_ATINGIDO
RET

ALARME_ATINGIDO:
# Liga LED9 (de limite atingido)
LDI R0, $1
STA R0, @258
# Ativa flag de inibição de contagem
STA R0, @19
JMP @INICIO
